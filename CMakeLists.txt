# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(learn LANGUAGES CXX)

# target
add_executable(learn "")
set_target_properties(learn PROPERTIES OUTPUT_NAME "learn")
set_target_properties(learn PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/exercises/build/linux/x86_64/release")
add_dependencies(learn test)
target_compile_options(learn PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
elseif(Clang)
    target_compile_options(learn PRIVATE -Wall)
elseif(Gcc)
    target_compile_options(learn PRIVATE -Wall)
endif()
if(MSVC)
    target_compile_options(learn PRIVATE /utf-8)
elseif(Clang)
    target_compile_options(learn PRIVATE -finput-charset=UTF-8)
    target_compile_options(learn PRIVATE -fexec-charset=UTF-8)
elseif(Gcc)
    target_compile_options(learn PRIVATE -finput-charset=UTF-8)
    target_compile_options(learn PRIVATE -fexec-charset=UTF-8)
endif()
set_target_properties(learn PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(learn PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(learn PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(learn PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(learn PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET learn PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(learn PRIVATE
    test
)
target_link_directories(learn PRIVATE
    exercises/build/linux/x86_64/release
)
target_link_options(learn PRIVATE
    -m64
)
target_sources(learn PRIVATE
    learn/learn.cpp
)

# target
add_executable(summary "")
set_target_properties(summary PROPERTIES OUTPUT_NAME "summary")
set_target_properties(summary PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/exercises/build/linux/x86_64/release")
add_dependencies(summary test)
target_compile_options(summary PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
elseif(Clang)
    target_compile_options(summary PRIVATE -Wall)
elseif(Gcc)
    target_compile_options(summary PRIVATE -Wall)
endif()
if(MSVC)
    target_compile_options(summary PRIVATE /utf-8)
elseif(Clang)
    target_compile_options(summary PRIVATE -finput-charset=UTF-8)
    target_compile_options(summary PRIVATE -fexec-charset=UTF-8)
elseif(Gcc)
    target_compile_options(summary PRIVATE -finput-charset=UTF-8)
    target_compile_options(summary PRIVATE -fexec-charset=UTF-8)
endif()
set_target_properties(summary PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(summary PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(summary PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(summary PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(summary PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET summary PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(summary PRIVATE
    test
)
target_link_directories(summary PRIVATE
    exercises/build/linux/x86_64/release
)
target_link_options(summary PRIVATE
    -m64
)
target_sources(summary PRIVATE
    learn/summary.cpp
)

# target
add_library(test STATIC "")
set_target_properties(test PROPERTIES OUTPUT_NAME "test")
set_target_properties(test PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/exercises/build/linux/x86_64/release")
target_compile_definitions(test PRIVATE
    __XMAKE__="/home/x/Project/study/LearningInfiniTensor/learning-cxx"
)
target_compile_options(test PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
elseif(Clang)
    target_compile_options(test PRIVATE -Wall)
elseif(Gcc)
    target_compile_options(test PRIVATE -Wall)
endif()
if(MSVC)
    target_compile_options(test PRIVATE /utf-8)
elseif(Clang)
    target_compile_options(test PRIVATE -finput-charset=UTF-8)
    target_compile_options(test PRIVATE -fexec-charset=UTF-8)
elseif(Gcc)
    target_compile_options(test PRIVATE -finput-charset=UTF-8)
    target_compile_options(test PRIVATE -fexec-charset=UTF-8)
endif()
set_target_properties(test PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(test PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(test PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(test PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET test PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(test PRIVATE
    -m64
)
target_sources(test PRIVATE
    learn/test.cpp
)

